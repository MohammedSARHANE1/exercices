{
  "questions": [
    {
      "question": "Which is the most popular JavaScript framework?",
      "options": ["Angular", "React", "Svelte", "Vue"],
      "correctOption": 1,
      "points": 10
    },
 
{
    "question": "What is the command to create a new React application using Create React App?",
    "options": [
        "npx create-react-app my-app",
        "npm create-react-app my-app",
        "npx create-react-app",
        "npm install create-react-app"
    ],
    "correctOption": 0,
    "points": 10,
    "id": "b239"
},
{
    "question": "What is the purpose of the useState hook in React?",
    "options": [
        "To manage the component lifecycle",
        "To handle HTTP requests",
        "To add state to functional components",
        "To interact with the DOM"
    ],
    "correctOption": 2,
    "points": 10,
    "id": "c847"
},
{
    "question": "How do you pass data from a parent component to a child component?",
    "options": [
        "Using state",
        "Using props",
        "Using context",
        "Using hooks"
    ],
    "correctOption": 1,
    "points": 10,
    "id": "d542"
},
{
    "question": "What is JSX?",
    "options": [
        "A syntax extension for JavaScript",
        "A CSS preprocessor",
        "A type checker for JavaScript",
        "A testing framework for React"
    ],
    "correctOption": 0,
    "points": 10,
    "id": "e613"
},
{
    "question": "How can you optimize performance in a React application?",
    "options": [
        "Using shouldComponentUpdate",
        "Using PureComponent",
        "Using React.memo",
        "All of the above"
    ],
    "correctOption": 3,
    "points": 10,
    "id": "f723"
},
{
    "question": "Which hook is used to perform side effects in functional components?",
    "options": [
        "useEffect",
        "useState",
        "useReducer",
        "useContext"
    ],
    "correctOption": 0,
    "points": 10,
    "id": "g324"
},

  {
      "question": "What's the fundamental building block of React apps?",
      "options": [
          "Components",
          "Blocks",
          "Elements",
          "Effects"
      ],
      "correctOption": 0,
      "points": 10
  },
  {
      "question": "What's the name of the syntax we use to describe the UI in React components?",
      "options": [
          "FBJ",
          "Babel",
          "JSX",
          "ES2015"
      ],
      "correctOption": 2,
      "points": 10
  },
  {
      "question": "How does data flow naturally in React apps?",
      "options": [
          "From parents to children",
          "From children to parents",
          "Both ways",
          "The developer decides"
      ],
      "correctOption": 0,
      "points": 10
  },
  {
      "question": "How to pass data into a child component?",
      "options": [
          "State",
          "Props",
          "PropTypes",
          "Parameters"
      ],
      "correctOption": 1,
      "points": 10
  },
  {
      "question": "When to use derived state?",
      "options": [
          "Whenever the state should not trigger a re-render",
          "Whenever the state can be synchronized with an effect",
          "Whenever the state should be accessible to all components",
          "Whenever the state can be computed from another state variable"
      ],
      "correctOption": 3,
      "points": 30
  },
  {
      "question": "What triggers a UI re-render in React?",
      "options": [
          "Running an effect",
          "Passing props",
          "Updating state",
          "Adding event listeners to DOM elements"
      ],
      "correctOption": 2,
      "points": 20
  },
  {
      "question": "When do we directly \"touch\" the DOM in React?",
      "options": [
          "When we need to listen to an event",
          "When we need to change the UI",
          "When we need to add styles",
          "Almost never"
      ],
      "correctOption": 3,
      "points": 20
  },
  {
      "question": "In what situation do we use a callback to update state?",
      "options": [
          "When updating the state will be slow",
          "When the updated state is very data-intensive",
          "When the state update should happen faster",
          "When the new state depends on the previous state"
      ],
      "correctOption": 3,
      "points": 30
  },
  {
      "question": "If we pass a function to useState, when will that function be called?",
      "options": [
          "On each re-render",
          "Each time we update the state",
          "Only on the initial render",
          "The first time we update the state"
      ],
      "correctOption": 2,
      "points": 30
  },
  {
      "question": "Which hook to use for an API request on the component's initial render?",
      "options": [
          "useState",
          "useEffect",
          "useRef",
          "useReducer"
      ],
      "correctOption": 1,
      "points": 10
  },
  {
      "question": "Which variables should go into the useEffect dependency array?",
      "options": [
          "Usually none",
          "All our state variables",
          "All state and props referenced in the effect",
          "All variables needed for clean up"
      ],
      "correctOption": 2,
      "points": 30
  },
  {
      "question": "An effect will always run on the initial render.",
      "options": [
          "True",
          "It depends on the dependency array",
          "False",
          "In depends on the code in the effect"
      ],
      "correctOption": 0,
      "points": 30
  },
  {
      "question": "When will an effect run if it doesn't have a dependency array?",
      "options": [
          "Only when the component mounts",
          "Only when the component unmounts",
          "The first time the component re-renders",
          "Each time the component is re-rendered"
      ],
      "correctOption": 3,
      "points": 20
  },
  {
      "question": "What's the purpose of the useRef hook in React?",
      "options": [
          "To create a reference to a DOM element",
          "To fetch data from an API",
          "To manage component state",
          "To handle routing"
      ],
      "correctOption": 0,
      "points": 10
  },
  {
      "question": "What is the role of the key prop in React?",
      "options": [
          "To uniquely identify elements in a list",
          "To manage component state",
          "To add event listeners",
          "To define component lifecycle methods"
      ],
      "correctOption": 0,
      "points": 10
  },
  {
      "question": "What is the purpose of React Router?",
      "options": [
          "To manage component state",
          "To handle HTTP requests",
          "To create Redux stores",
          "To handle navigation in a React application"
      ],
      "correctOption": 3,
      "points": 10
  }
,

{
    "question": "What is the purpose of ReactDOM in a React application?",
    "options": [
        "To manage component state",
        "To handle routing",
        "To interact with the DOM",
        "To create Redux stores"
    ],
    "correctOption": 2,
    "points": 10,
    "id": "h451"
},
{
    "question": "How do you handle events in React?",
    "options": [
        "Using HTML event attributes",
        "Using inline JavaScript",
        "Using camelCase syntax with event handlers",
        "Using jQuery"
    ],
    "correctOption": 2,
    "points": 10,
    "id": "i892"
},
{
    "question": "What is a key prop and why is it important in React?",
    "options": [
        "A prop to uniquely identify elements in a list",
        "A prop to pass state between components",
        "A prop to handle events",
        "A prop to set component lifecycle methods"
    ],
    "correctOption": 0,
    "points": 10,
    "id": "j673"
},
{
    "question": "What is the context API used for in React?",
    "options": [
        "Managing local component state",
        "Passing data through the component tree without prop drilling",
        "Handling HTTP requests",
        "Optimizing component performance"
    ],
    "correctOption": 1,
    "points": 10,
    "id": "k567"
},
    {
      "question": "What's the fundamental building block of React apps?",
      "options": ["Components", "Blocks", "Elements", "Effects"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What's the name of the syntax we use to describe the UI in React components?",
      "options": ["FBJ", "Babel", "JSX", "ES2015"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How does data flow naturally in React apps?",
      "options": [
        "From parents to children",
        "From children to parents",
        "Both ways",
        "The developers decides"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "How to pass data into a child component?",
      "options": ["State", "Props", "PropTypes", "Parameters"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "When to use derived state?",
      "options": [
        "Whenever the state should not trigger a re-render",
        "Whenever the state can be synchronized with an effect",
        "Whenever the state should be accessible to all components",
        "Whenever the state can be computed from another state variable"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What triggers a UI re-render in React?",
      "options": [
        "Running an effect",
        "Passing props",
        "Updating state",
        "Adding event listeners to DOM elements"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "When do we directly \"touch\" the DOM in React?",
      "options": [
        "When we need to listen to an event",
        "When we need to change the UI",
        "When we need to add styles",
        "Almost never"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "In what situation do we use a callback to update state?",
      "options": [
        "When updating the state will be slow",
        "When the updated state is very data-intensive",
        "When the state update should happen faster",
        "When the new state depends on the previous state"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "If we pass a function to useState, when will that function be called?",
      "options": [
        "On each re-render",
        "Each time we update the state",
        "Only on the initial render",
        "The first time we update the state"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "Which hook to use for an API request on the component's initial render?",
      "options": ["useState", "useEffect", "useRef", "useReducer"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which variables should go into the useEffect dependency array?",
      "options": [
        "Usually none",
        "All our state variables",
        "All state and props referenced in the effect",
        "All variables needed for clean up"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "An effect will always run on the initial render.",
      "options": [
        "True",
        "It depends on the dependency array",
        "False",
        "In depends on the code in the effect"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "When will an effect run if it doesn't have a dependency array?",
      "options": [
        "Only when the component mounts",
        "Only when the component unmounts",
        "The first time the component re-renders",
        "Each time the component is re-rendered"
      ],
      "correctOption": 3,
      "points": 20
    }
  ]
}
